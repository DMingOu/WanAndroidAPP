package com.aserbao.aserbaosandroid.functions.database.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.wanandroidapp.bean.HistoryArticleData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_ARTICLE_DATA".
*/
public class HistoryArticleDataDao extends AbstractDao<HistoryArticleData, Long> {

    public static final String TABLENAME = "HISTORY_ARTICLE_DATA";

    /**
     * Properties of entity HistoryArticleData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property LastTime = new Property(3, String.class, "lastTime", false, "LAST_TIME");
        public final static Property Id = new Property(4, int.class, "id", false, "ID");
        public final static Property Author = new Property(5, String.class, "author", false, "AUTHOR");
    }


    public HistoryArticleDataDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryArticleDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_ARTICLE_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"TITLE\" TEXT UNIQUE ," + // 1: title
                "\"URL\" TEXT," + // 2: url
                "\"LAST_TIME\" TEXT," + // 3: lastTime
                "\"ID\" INTEGER NOT NULL ," + // 4: id
                "\"AUTHOR\" TEXT);"); // 5: author
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_ARTICLE_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryArticleData entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String lastTime = entity.getLastTime();
        if (lastTime != null) {
            stmt.bindString(4, lastTime);
        }
        stmt.bindLong(5, entity.getId());
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(6, author);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryArticleData entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String lastTime = entity.getLastTime();
        if (lastTime != null) {
            stmt.bindString(4, lastTime);
        }
        stmt.bindLong(5, entity.getId());
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(6, author);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HistoryArticleData readEntity(Cursor cursor, int offset) {
        HistoryArticleData entity = new HistoryArticleData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lastTime
            cursor.getInt(offset + 4), // id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // author
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryArticleData entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLastTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setId(cursor.getInt(offset + 4));
        entity.setAuthor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HistoryArticleData entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HistoryArticleData entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoryArticleData entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
